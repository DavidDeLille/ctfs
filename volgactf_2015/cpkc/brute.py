#!/usr/bin/python
# coding: utf-8

# >>> pub.h
# mpz(1136442024267523825013847851112107799614139727041101917089257725339218962371709826601362167788005344649684118107583201352776899548382759426322643946414766582198386533762101217618752825305626339810709902888213101632726650051820937039250027089444815624542124520739159523088706626107426013679647118687850118502046293928951492669972231336374318644375621364959653109144237431787345111613171220120777671040970449703248587914989552930014207209875104038105455091994702342333557552051008503570350202559048328784862905247679704671536561709034334888322413387917762483901742722191454470034001937363072705021300843980742619915167812975258828730471075365894844356963082095631177537249712390044118001119056289517463741597628867571606265061564209054877712944146424255464076885255754869395676691170125748791239960592331058008411251149910406448990923117149964806771577053050903627516711991688111864202279639456142611545855798445830617308857332L)
# >>> pub.q
# mpz(3367265882837954210676304584431797098138381997768098211335928125206172247763386041902728948050566495372108880984445203409302110487753791682250539904168133977004713632865483082897914462471809630243023348018928967801312666051757350142719434257370449813068201063039966064615983650746716139796093823707478421170291222636659716253748005582481892759223073606601570215315409177660738135805372002477059782109948136605784857780073311161785331818481358922812819440181220099800258086113952782561140979479051398470739666120174013354970458845877433005774523168528068136618355916983823174658471040916321270531357372016010157674004149667188327971975759424093154273384340032849457706953236075899507918002653153590766408882802761369282936837818961768691715439956350511650677256594371253854217549904892522548908966801696085283069493131400326572235994421277767142037167603121524630439535985176679244281151395412722052552957876796813181134529373L)

import gmpy2
from gmpy2 import mpz, isqrt, invert, is_prime
import os
import base64

def gen_big_random(bit_len, msb=1):
    n = (bit_len + 7) / 8
    shift = bit_len % 8 - 1
    if shift < 0: shift = 7
    bit = msb << shift
    mask = (1 << shift) - 1
    s = list(os.urandom(n))
    s[0] = chr((ord(s[0]) & mask) | bit)
    return data_to_int(''.join(s))

def data_to_int(s):
    return mpz(s.encode('hex'), 16)

def brute_force(h, q, q_bit_length):
    count = 0
    while True:
        if count%10000 == 0:
            print count
        count += 1
        try:
            f = gen_big_random(q_bit_length/2, msb = 0)
            assert(f.bit_length() > 0 and f.bit_length() < q_bit_length/2)
            g = h*f % q
            assert(g.bit_length() > q_bit_length/4 and g.bit_length() < q_bit_length/2)
            return f, g
        except:
            continue

h = mpz(1136442024267523825013847851112107799614139727041101917089257725339218962371709826601362167788005344649684118107583201352776899548382759426322643946414766582198386533762101217618752825305626339810709902888213101632726650051820937039250027089444815624542124520739159523088706626107426013679647118687850118502046293928951492669972231336374318644375621364959653109144237431787345111613171220120777671040970449703248587914989552930014207209875104038105455091994702342333557552051008503570350202559048328784862905247679704671536561709034334888322413387917762483901742722191454470034001937363072705021300843980742619915167812975258828730471075365894844356963082095631177537249712390044118001119056289517463741597628867571606265061564209054877712944146424255464076885255754869395676691170125748791239960592331058008411251149910406448990923117149964806771577053050903627516711991688111864202279639456142611545855798445830617308857332L)
q = mpz(3367265882837954210676304584431797098138381997768098211335928125206172247763386041902728948050566495372108880984445203409302110487753791682250539904168133977004713632865483082897914462471809630243023348018928967801312666051757350142719434257370449813068201063039966064615983650746716139796093823707478421170291222636659716253748005582481892759223073606601570215315409177660738135805372002477059782109948136605784857780073311161785331818481358922812819440181220099800258086113952782561140979479051398470739666120174013354970458845877433005774523168528068136618355916983823174658471040916321270531357372016010157674004149667188327971975759424093154273384340032849457706953236075899507918002653153590766408882802761369282936837818961768691715439956350511650677256594371253854217549904892522548908966801696085283069493131400326572235994421277767142037167603121524630439535985176679244281151395412722052552957876796813181134529373L)
q_bit_length = 3072

f,g = brute_force(h, q, q_bit_length)
print "f = %d"%f
print "g = %d"%g